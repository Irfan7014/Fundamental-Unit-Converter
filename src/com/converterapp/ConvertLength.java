/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.converterapp;

import java.awt.Color;

/**
 *
 * @author Admin
 */
public class ConvertLength extends javax.swing.JFrame {

    /**
     * Creates new form ConvertLength
     */
    public ConvertLength() {
        initComponents();
        Color backgroundcolor=new Color(255,102,102);
        this.getContentPane().setBackground(backgroundcolor);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterlengthjLabel = new javax.swing.JLabel();
        lengthtext = new javax.swing.JTextField();
        fromunitjLabel = new javax.swing.JLabel();
        fromunit = new javax.swing.JComboBox();
        tounitjLabel = new javax.swing.JLabel();
        tounit = new javax.swing.JComboBox();
        convertbutton = new javax.swing.JButton();
        resetbutton = new javax.swing.JButton();
        closebutton = new javax.swing.JButton();
        convertedlength = new javax.swing.JTextField();
        gobacktohomepagebutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CONVERT LENGTH");

        enterlengthjLabel.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        enterlengthjLabel.setForeground(new java.awt.Color(0, 0, 0));
        enterlengthjLabel.setText("ENTER LENGTH: ");

        lengthtext.setBackground(new java.awt.Color(255, 255, 255));
        lengthtext.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lengthtext.setForeground(new java.awt.Color(0, 0, 0));

        fromunitjLabel.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        fromunitjLabel.setForeground(new java.awt.Color(0, 0, 0));
        fromunitjLabel.setText("FROM UNIT:");

        fromunit.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        fromunit.setForeground(new java.awt.Color(0, 0, 0));
        fromunit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kilometre", "Metre", "Centimetre", "Millimetre", "Mile", "Yard", "Foot", "Inch" }));

        tounitjLabel.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        tounitjLabel.setForeground(new java.awt.Color(0, 0, 0));
        tounitjLabel.setText("TO UNIT:");

        tounit.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tounit.setForeground(new java.awt.Color(0, 0, 0));
        tounit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kilometre", "Metre", "Centimetre", "Millimetre", "Mile", "Yard", "Foot", "Inch" }));

        convertbutton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        convertbutton.setForeground(new java.awt.Color(0, 0, 0));
        convertbutton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Documents\\NetBeansProjects\\WeightConverter\\src\\com\\converterapp\\reload.png")); // NOI18N
        convertbutton.setText("CONVERT");
        convertbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                convertbuttonMouseClicked(evt);
            }
        });

        resetbutton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        resetbutton.setForeground(new java.awt.Color(0, 0, 0));
        resetbutton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\cancel.png")); // NOI18N
        resetbutton.setText("RESET");
        resetbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetbuttonMouseClicked(evt);
            }
        });

        closebutton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        closebutton.setForeground(new java.awt.Color(0, 0, 0));
        closebutton.setText("CLOSE");
        closebutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closebuttonMouseClicked(evt);
            }
        });

        convertedlength.setBackground(new java.awt.Color(255, 255, 255));
        convertedlength.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        convertedlength.setForeground(new java.awt.Color(0, 0, 0));

        gobacktohomepagebutton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        gobacktohomepagebutton.setForeground(new java.awt.Color(0, 0, 0));
        gobacktohomepagebutton.setText("GO BACK TO HOME PAGE");
        gobacktohomepagebutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gobacktohomepagebuttonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(tounitjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fromunitjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(enterlengthjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lengthtext, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(tounit, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(fromunit, javax.swing.GroupLayout.Alignment.LEADING, 0, 200, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(convertedlength)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(convertbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(resetbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(closebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 11, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(gobacktohomepagebutton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterlengthjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lengthtext, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromunitjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromunit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tounitjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tounit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(convertbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(convertedlength, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(gobacktohomepagebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gobacktohomepagebuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gobacktohomepagebuttonMouseClicked
        // TODO add your handling code here:
        dispose();
        Start s=new Start();
    }//GEN-LAST:event_gobacktohomepagebuttonMouseClicked

    private void closebuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closebuttonMouseClicked
        // TODO add your handling code here:
        dispose();
        Close c=new Close();
    }//GEN-LAST:event_closebuttonMouseClicked

    private void resetbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetbuttonMouseClicked
        // TODO add your handling code here:
        dispose();
        ConvertLength cl=new ConvertLength();
    }//GEN-LAST:event_resetbuttonMouseClicked

    private void convertbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_convertbuttonMouseClicked
        // TODO add your handling code here:
        String from,to,ans,convert;
        from=fromunit.getSelectedItem().toString();
        to=tounit.getSelectedItem().toString();
        convert=lengthtext.getText();
        if (from.equals("Kilometre") && to.equals("Kilometre"))   //1
        {
            ans=kilometretokilometre(convert);
            convertedlength.setText(convert+" km = "+ans+" km");
        }
        else if (from.equals("Kilometre") && to.equals("Metre"))   //2
        {
            ans=kilometretometre(convert);
            convertedlength.setText(convert+" km = "+ans+" m");
        }
        else if (from.equals("Kilometre") && to.equals("Centimetre"))   //3
        {
            ans=kilometretocentimetre(convert);
            convertedlength.setText(convert+" km = "+ans+" cm");
        }
        else if (from.equals("Kilometre") && to.equals("Millimetre"))   //4
        {
            ans=kilometretomillimetre(convert);
            convertedlength.setText(convert+" km = "+ans+" mm");
        }
        else if (from.equals("Kilometre") && to.equals("Mile"))   //5
        {
            ans=kilometretomile(convert);
            convertedlength.setText(convert+" km = "+ans+" mi");
        }
        else if (from.equals("Kilometre") && to.equals("Yard"))   //6
        {
            ans=kilometretoyard(convert);
            convertedlength.setText(convert+" km = "+ans+" yd");
        }
        else if (from.equals("Kilometre") && to.equals("Foot"))   //7
        {
            ans=kilometretofoot(convert);
            convertedlength.setText(convert+" km = "+ans+" ft");
        }
        else if (from.equals("Kilometre") && to.equals("Inch"))   //8
        {
            ans=kilometretoinch(convert);
            convertedlength.setText(convert+" km = "+ans+" in");
        }
        else if (from.equals("Metre") && to.equals("Kilometre"))   //9
        {
            ans=metretokilometre(convert);
            convertedlength.setText(convert+" m = "+ans+" km");
        }
        else if (from.equals("Metre") && to.equals("Metre"))   //10
        {
            ans=metretometre(convert);
            convertedlength.setText(convert+" m = "+ans+" m");
        }
        else if (from.equals("Metre") && to.equals("Centimetre"))   //11
        {
            ans=metretocentimetre(convert);
            convertedlength.setText(convert+" m = "+ans+" cm");
        }
        else if (from.equals("Metre") && to.equals("Millimetre"))   //12
        {
            ans=metretomillimetre(convert);
            convertedlength.setText(convert+" m = "+ans+" mm");
        }
        else if (from.equals("Metre") && to.equals("Mile"))   //13
        {
            ans=metretomile(convert);
            convertedlength.setText(convert+" m = "+ans+" mi");
        }
        else if (from.equals("Metre") && to.equals("Yard"))   //14
        {
            ans=metretoyard(convert);
            convertedlength.setText(convert+" m = "+ans+" yd");
        }
        else if (from.equals("Metre") && to.equals("Foot"))   //15
        {
            ans=metretofoot(convert);
            convertedlength.setText(convert+" m = "+ans+" ft");
        }
        else if (from.equals("Metre") && to.equals("Inch"))   //16
        {
            ans=metretoinch(convert);
            convertedlength.setText(convert+" m = "+ans+" in");
        }
        else if (from.equals("Centimetre") && to.equals("Kilometre"))   //17
        {
            ans=centimetretokilometre(convert);
            convertedlength.setText(convert+" cm = "+ans+" km");
        }
        else if (from.equals("Centimetre") && to.equals("Metre"))   //18
        {
            ans=centimetretometre(convert);
            convertedlength.setText(convert+" cm = "+ans+" m");
        }
        else if (from.equals("Centimetre") && to.equals("Centimetre"))   //19
        {
            ans=centimetretocentimetre(convert);
            convertedlength.setText(convert+" cm = "+ans+" cm");
        }
        else if (from.equals("Centimetre") && to.equals("Millimetre"))   //20
        {
            ans=centimetretomillimetre(convert);
            convertedlength.setText(convert+" cm = "+ans+" mm");
        }
        else if (from.equals("Centimetre") && to.equals("Mile"))   //21
        {
            ans=centimetretomile(convert);
            convertedlength.setText(convert+" cm = "+ans+" mi");
        }
        else if (from.equals("Centimetre") && to.equals("Yard"))   //22
        {
            ans=centimetretoyard(convert);
            convertedlength.setText(convert+" cm = "+ans+" yd");
        }
        else if (from.equals("Centimetre") && to.equals("Foot"))   //23
        {
            ans=centimetretofoot(convert);
            convertedlength.setText(convert+" cm = "+ans+" ft");
        }
        else if (from.equals("Centimetre") && to.equals("Inch"))   //24
        {
            ans=centimetretoinch(convert);
            convertedlength.setText(convert+" cm = "+ans+" in");
        }
        else if (from.equals("Millimetre") && to.equals("Kilometre"))   //25
        {
            ans=millimetretokilometre(convert);
            convertedlength.setText(convert+" mm = "+ans+" km");
        }
        else if (from.equals("Millimetre") && to.equals("Metre"))   //26
        {
            ans=millimetretometre(convert);
            convertedlength.setText(convert+" mm = "+ans+" m");
        }
        else if (from.equals("Millimetre") && to.equals("Centimetre"))   //27
        {
            ans=millimetretocentimetre(convert);
            convertedlength.setText(convert+" mm = "+ans+" cm");
        }
        else if (from.equals("Millimetre") && to.equals("Millimetre"))   //28
        {
            ans=millimetretomillimetre(convert);
            convertedlength.setText(convert+" mm = "+ans+" mm");
        }
        else if (from.equals("Millimetre") && to.equals("Mile"))   //29
        {
            ans=millimetretomile(convert);
            convertedlength.setText(convert+" mm = "+ans+" mi");
        }
        else if (from.equals("Millimetre") && to.equals("Yard"))   //30
        {
            ans=millimetretoyard(convert);
            convertedlength.setText(convert+" mm = "+ans+" yd");
        }
        else if (from.equals("Millimetre") && to.equals("Foot"))   //31
        {
            ans=millimetretofoot(convert);
            convertedlength.setText(convert+" mm = "+ans+" ft");
        }
        else if (from.equals("Millimetre") && to.equals("Inch"))   //32
        {
            ans=millimetretoinch(convert);
            convertedlength.setText(convert+" mm = "+ans+" in");
        }
        else if (from.equals("Mile") && to.equals("Kilometre"))   //33
        {
            ans=miletokilometre(convert);
            convertedlength.setText(convert+" mi = "+ans+" km");
        }
        else if (from.equals("Mile") && to.equals("Metre"))   //34
        {
            ans=miletometre(convert);
            convertedlength.setText(convert+" mi = "+ans+" m");
        }
        else if (from.equals("Mile") && to.equals("Centimetre"))   //35
        {
            ans=miletocentimetre(convert);
            convertedlength.setText(convert+" mi = "+ans+" cm");
        }
        else if (from.equals("Mile") && to.equals("Millimetre"))   //36
        {
            ans=miletomillimetre(convert);
            convertedlength.setText(convert+" mi = "+ans+" mm");
        }
        else if (from.equals("Mile") && to.equals("Mile"))   //37
        {
            ans=miletomile(convert);
            convertedlength.setText(convert+" mi = "+ans+" mi");
        }
        else if (from.equals("Mile") && to.equals("Yard"))   //38
        {
            ans=miletoyard(convert);
            convertedlength.setText(convert+" mi = "+ans+" yd");
        }
        else if (from.equals("Mile") && to.equals("Foot"))   //39
        {
            ans=miletofoot(convert);
            convertedlength.setText(convert+" mi = "+ans+" ft");
        }
        else if (from.equals("Mile") && to.equals("Inch"))   //40
        {
            ans=miletoinch(convert);
            convertedlength.setText(convert+" mi = "+ans+" in");
        }
        else if (from.equals("Yard") && to.equals("Kilometre"))   //41
        {
            ans=yardtokilometre(convert);
            convertedlength.setText(convert+" yd = "+ans+" km");
        }
        else if (from.equals("Yard") && to.equals("Metre"))   //42
        {
            ans=yardtometre(convert);
            convertedlength.setText(convert+" yd = "+ans+" m");
        }
        else if (from.equals("Yard") && to.equals("Centimetre"))   //43
        {
            ans=yardtocentimetre(convert);
            convertedlength.setText(convert+" yd = "+ans+" cm");
        }
        else if (from.equals("Yard") && to.equals("Millimetre"))   //44
        {
            ans=yardtomillimetre(convert);
            convertedlength.setText(convert+" yd = "+ans+" mm");
        }
        else if (from.equals("Yard") && to.equals("Mile"))   //45
        {
            ans=yardtomile(convert);
            convertedlength.setText(convert+" yd = "+ans+" mi");
        }
        else if (from.equals("Yard") && to.equals("Yard"))   //46
        {
            ans=yardtoyard(convert);
            convertedlength.setText(convert+" yd = "+ans+" yd");
        }
        else if (from.equals("Yard") && to.equals("Foot"))   //47
        {
            ans=yardtofoot(convert);
            convertedlength.setText(convert+" yd = "+ans+" ft");
        }
        else if (from.equals("Yard") && to.equals("Inch"))   //48
        {
            ans=yardtoinch(convert);
            convertedlength.setText(convert+" yd = "+ans+" in");
        }
        else if (from.equals("Foot") && to.equals("Kilometre"))   //49
        {
            ans=foottokilometre(convert);
            convertedlength.setText(convert+" ft = "+ans+" km");
        }
        else if (from.equals("Foot") && to.equals("Metre"))   //50
        {
            ans=foottometre(convert);
            convertedlength.setText(convert+" ft = "+ans+" m");
        }
        else if (from.equals("Foot") && to.equals("Centimetre"))   //51
        {
            ans=foottocentimetre(convert);
            convertedlength.setText(convert+" ft = "+ans+" cm");
        }
        else if (from.equals("Foot") && to.equals("Millimetre"))   //52
        {
            ans=foottomillimetre(convert);
            convertedlength.setText(convert+" ft = "+ans+" mm");
        }
        else if (from.equals("Foot") && to.equals("Mile"))   //53
        {
            ans=foottomile(convert);
            convertedlength.setText(convert+" ft = "+ans+" mi");
        }
        else if (from.equals("Foot") && to.equals("Yard"))   //54
        {
            ans=foottoyard(convert);
            convertedlength.setText(convert+" ft = "+ans+" yd");
        }
        else if (from.equals("Foot") && to.equals("Foot"))   //55
        {
            ans=foottofoot(convert);
            convertedlength.setText(convert+" ft = "+ans+" ft");
        }
        else if (from.equals("Foot") && to.equals("Inch"))   //56
        {
            ans=foottoinch(convert);
            convertedlength.setText(convert+" ft = "+ans+" in");
        }
        else if (from.equals("Inch") && to.equals("Kilometre"))   //57
        {
            ans=inchtokilometre(convert);
            convertedlength.setText(convert+" in = "+ans+" km");
        }
        else if (from.equals("Inch") && to.equals("Metre"))   //58
        {
            ans=inchtometre(convert);
            convertedlength.setText(convert+" in = "+ans+" m");
        }
        else if (from.equals("Inch") && to.equals("Centimetre"))   //59
        {
            ans=inchtocentimetre(convert);
            convertedlength.setText(convert+" in = "+ans+" cm");
        }
        else if (from.equals("Inch") && to.equals("Millimetre"))   //60
        {
            ans=inchtomillimetre(convert);
            convertedlength.setText(convert+" in = "+ans+" mm");
        }
        else if (from.equals("Inch") && to.equals("Mile"))   //61
        {
            ans=inchtomile(convert);
            convertedlength.setText(convert+" in = "+ans+" mi");
        }
        else if (from.equals("Inch") && to.equals("Yard"))   //62
        {
            ans=inchtoyard(convert);
            convertedlength.setText(convert+" in = "+ans+" yd");
        }
        else if (from.equals("Inch") && to.equals("Foot"))   //63
        {
            ans=inchtofoot(convert);
            convertedlength.setText(convert+" in = "+ans+" ft");
        }
        else if (from.equals("Inch") && to.equals("Inch"))   //64
        {
            ans=inchtoinch(convert);
            convertedlength.setText(convert+" in = "+ans+" in");
        }
    }//GEN-LAST:event_convertbuttonMouseClicked

    /**
     * @param val
     * @return 
     */
    public String kilometretokilometre(String val)  //1) km to km
    {
        return val;
    }
    public String metretometre(String val)  //2) m to m
    {
        return val;
    }
    public String centimetretocentimetre(String val)  //3) cm to cm
    {
        return val;
    }
    public String millimetretomillimetre(String val)  //4) mm to mm
    {
        return val;
    }
    public String miletomile(String val)  //5) mi to mi
    {
        return val;
    }
    public String yardtoyard(String val)  //6) yd to yd
    {
        return val;
    }
    public String foottofoot(String val)  //7) ft to ft
    {
        return val;
    }
    public String inchtoinch(String val)  //8) in to in
    {
        return val;
    }
    public String kilometretometre(String val) //9) km to m
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*1000);
        return ans;
    }
    public String kilometretocentimetre(String val) //10) km to cm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*100000);
        return ans;
    }
    public String kilometretomillimetre(String val) //11) km to mm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*1000000);
        return ans;
    }
    public String kilometretomile(String val) //12) km to mi
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/1.609);
        return ans;
    }
    public String kilometretoyard(String val) //13) km to yd
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*1094);
        return ans;
    }
    public String kilometretofoot(String val)  //14) km to ft
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*3281);
        return ans;
    }
    public String kilometretoinch(String val)  //15) km to in
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*39370);
        return ans;
    }
    public String metretokilometre(String val)  //16) m to km
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/1000);
        return ans;
    }
    public String metretocentimetre(String val)  //17) m to cm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*100);
        return ans;
    }
    public String metretomillimetre(String val)  //18) m to mm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*1000);
        return ans;
    }
    public String metretomile(String val)  //19) m to mi
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/1609);
        return ans;
    }
    public String metretoyard(String val)  //20) m to yd
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*1.094);
        return ans;
    }
    public String metretofoot(String val)  //21) m to ft
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*3.281);
        return ans;
    }
    public String metretoinch(String val)  //22) m to in
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*39.37);
        return ans;
    }
    public String centimetretokilometre(String val)  //23) cm to km
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/100000);
        return ans;
    }
    public String centimetretometre(String val)  //24) cm to m
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/100);
        return ans;
    }
    public String centimetretomillimetre(String val)  //25) cm to mm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*10);
        return ans;
    }
    public String centimetretomile(String val)  //26) cm to mi
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/160934);
        return ans;
    }
    public String centimetretoyard(String val)  //27) cm to yd
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/91.44);
        return ans;
    }
    public String centimetretofoot(String val)  //28) cm to ft
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/30.48);
        return ans;
    }
    public String centimetretoinch(String val)  //29) cm to in
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/2.54);
        return ans;
    }
    public String millimetretokilometre(String val)  //30) mm to km
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/100000);
        return ans;
    }
    public String millimetretometre(String val)  //31) mm to m
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/1000);
        return ans;
    }
    public String millimetretocentimetre(String val)  //32) mm to cm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/10);
        return ans;
    }
    public String millimetretomile(String val)  //33) mm to mi
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/1609000);
        return ans;
    }
    public String millimetretoyard(String val)  //34) mm to yd
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/914);
        return ans;
    }
    public String millimetretofoot(String val)  //35) mm to ft
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/305);
        return ans;
    }
    public String millimetretoinch(String val)  //36) mm to in
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/25.4);
        return ans;
    }
    public String miletokilometre(String val)  //37) mi to km
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*1.609);
        return ans;
    }
    public String miletometre(String val)  //38) mi to m
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*1609);
        return ans;
    }
    public String miletocentimetre(String val)  //39) mi to cm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*160934);
        return ans;
    }
    public String miletomillimetre(String val)  //40) mi to mm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*1609340);
        return ans;
    }
    public String miletoyard(String val)  //41) mi to yd
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*1760);
        return ans;
    }
    public String miletofoot(String val)  //42) mi to ft
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*5280);
        return ans;
    }
    public String miletoinch(String val)  //43) mi to in
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*63360);
        return ans;
    }
    public String yardtokilometre(String val)  //44) yd to km
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/1094);
        return ans;
    }
    public String yardtometre(String val)  //45) yd to m
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/1.094);
        return ans;
    }
    public String yardtocentimetre(String val)  //46) yd to cm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*91.44);
        return ans;
    }
    public String yardtomillimetre(String val)  //47) yd to mm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*9144);
        return ans;
    }
    public String yardtomile(String val)  //48) yd to mi
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/1760);
        return ans;
    }
    public String yardtofoot(String val)  //49) yd to ft
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*3);
        return ans;
    }
    public String yardtoinch(String val)  //50) yd to in
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*36);
        return ans;
    }
    public String foottokilometre(String val)  //51) ft to km
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/3281);
        return ans;
    }
    public String foottometre(String val)  //52) ft to m
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/3.281);
        return ans;
    }
    public String foottocentimetre(String val)  //53) ft to cm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*30.48);
        return ans;
    }
    public String foottomillimetre(String val)  //54) ft to mm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/305);
        return ans;
    }
    public String foottomile(String val)  //55) ft to mi
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/5280);
        return ans;
    }
    public String foottoyard(String val)  //56) ft to yd
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/3);
        return ans;
    }
    public String foottoinch(String val)  //57) ft to in
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*12);
        return ans;
    }
    public String inchtokilometre(String val)  //58) in to km
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/39370);
        return ans;
    }
    public String inchtometre(String val)  //59) in to m
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/39.37);
        return ans;
    }
    public String inchtocentimetre(String val)  //60) in to cm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*2.54);
        return ans;
    }
    public String inchtomillimetre(String val)  //61) in to mm
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input*25.4);
        return ans;
    }
    public String inchtomile(String val)  //62) in to mi
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/63360);
        return ans;
    }
    public String inchtoyard(String val)  //63) in to yd
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/36);
        return ans;
    }
    public String inchtofoot(String val)  //64) in to ft
    {
        String ans=val;
        double input=Double.parseDouble(val);
        ans=Double.toString(input/12);
        return ans;
    }
 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConvertLength.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConvertLength.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConvertLength.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConvertLength.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConvertLength().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closebutton;
    private javax.swing.JButton convertbutton;
    private javax.swing.JTextField convertedlength;
    private javax.swing.JLabel enterlengthjLabel;
    private javax.swing.JComboBox fromunit;
    private javax.swing.JLabel fromunitjLabel;
    private javax.swing.JButton gobacktohomepagebutton;
    private javax.swing.JTextField lengthtext;
    private javax.swing.JButton resetbutton;
    private javax.swing.JComboBox tounit;
    private javax.swing.JLabel tounitjLabel;
    // End of variables declaration//GEN-END:variables
  
}
